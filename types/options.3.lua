---@meta

--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- number (default 12)
-- 			global
-- 	Default height for a preview window.  Used for |:ptag| and associated
-- 	commands.  Used for |CTRL-W_}| when no count is given.
vim.o.previewheight = "12"
-- number	(default 0)
-- 			global
-- 	Maximum number of items to show in the popup menu
-- 	(|ins-completion-menu|). Zero means "use available screen space".
vim.o.pumheight = "0"
-- boolean	(default on)
-- 			global
-- 			{only works in the GUI}
-- 	When on, the mouse pointer is hidden when characters are typed.
-- 	The mouse pointer is restored when the mouse is moved.
vim.o.mousehide = "true"
-- number (default 0)
-- 			global or local to window |global-local|
-- 	The minimal number of screen columns to keep to the left and to the
-- 	right of the cursor if 'nowrap' is set.  Setting this option to a
-- 	value greater than 0 while having |'sidescroll'| also at a non-zero
-- 	value makes some context visible in the line you are scrolling in
-- 	horizontally (except at beginning of the line).  Setting this option
-- 	to a large value (like 999) has the effect of keeping the cursor
-- 	horizontally centered in the window, as long as one does not come too
-- 	close to the beginning of the line.
-- 	After using the local value, go back the global value with one of
-- 	these two: >
-- 		setlocal sidescrolloff<
-- 		setlocal sidescrolloff=-1
-- <
-- 	Example: Try this together with 'sidescroll' and 'listchars' as
-- 		 in the following example to never allow the cursor to move
-- 		 onto the "extends" character: >
vim.o.sidescrolloff = "0"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	If in Insert, Replace or Visual mode put a message on the last line.
-- 	The |hl-ModeMsg| highlight group determines the highlighting.
vim.o.showmode = "true"
-- number	(default 1000)
-- 			global
-- 	Time in milliseconds to wait for a mapped sequence to complete.
vim.o.timeoutlen = "1000"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	Encoding used for reading the output of external commands.  When empty,
-- 	encoding is not converted.
-- 	This is used for `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`,
-- 	`:lgrepadd`, `:cfile`, `:cgetfile`, `:caddfile`, `:lfile`, `:lgetfile`,
-- 	and `:laddfile`.
vim.o.makeencoding = ""
-- boolean	(default off, on when title can be restored)
-- 			global
-- 	When on, the icon text of the window will be set to the value of
-- 	'iconstring' (if it is not empty), or to the name of the file
-- 	currently being edited.  Only the last part of the name is used.
-- 	Overridden by the 'iconstring' option.
-- 	Only works if the terminal supports setting window icons.
vim.o.icon = "false"
-- string	(default "")
-- 			global
-- 	A list of file patterns.  A file that matches with one of these
-- 	patterns is ignored when expanding |wildcards|, completing file or
-- 	directory names, and influences the result of |expand()|, |glob()| and
-- 	|globpath()| unless a flag is passed to disable this.
-- 	The pattern is used like with |:autocmd|, see |autocmd-pattern|.
-- 	Also see 'suffixes'.
-- 	Example: >
-- 		:set wildignore=*.o,*.obj
-- <	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	a pattern from the list.  This avoids problems when a future version
-- 	uses another default.
vim.o.wildignore = ""
-- number	(default 2)
-- 			global
-- 	The value of this option influences when the last window will have a
-- 	status line:
-- 		0: never
-- 		1: only if there are at least two windows
-- 		2: always
-- 	The screen looks nicer with a status line if you have several
-- 	windows, but it takes another screen line. |status-line|
vim.o.laststatus = "2"
-- string	(default for Windows:
-- 					   "@,48-57,_,128-167,224-235"
-- 				otherwise: "@,48-57,_,192-255")
-- 			global
-- 	The characters given by this option are included in identifiers.
-- 	Identifiers are used in recognizing environment variables and after a
-- 	match of the 'define' option.  It is also used for "\i" in a
-- 	|pattern|.  See 'isfname' for a description of the format of this
-- 	option.  For '@' only characters up to 255 are used.
-- 	Careful: If you change this option, it might break expanding
-- 	environment variables.  E.g., when '/' is included and Vim tries to
-- 	expand "$HOME/.local/share/nvim/shada/main.shada".  Maybe you should
-- 	change 'iskeyword' instead.
vim.o.isident = "@,48-57,_,192-255"
-- string	(Vim default "filnxtToOF", Vi default: "S")
-- 			global
-- 	This option helps to avoid all the |hit-enter| prompts caused by file
-- 	messages, for example  with CTRL-G, and to avoid some other messages.
-- 	It is a list of flags:
-- 	 flag	meaning when present	~
-- 	  f	use "(3 of 5)" instead of "(file 3 of 5)"
-- 	  i	use "[noeol]" instead of "[Incomplete last line]"
-- 	  l	use "999L, 888C" instead of "999 lines, 888 characters"
-- 	  m	use "[+]" instead of "[Modified]"
-- 	  n	use "[New]" instead of "[New File]"
-- 	  r	use "[RO]" instead of "[readonly]"
-- 	  w	use "[w]" instead of "written" for file write message
-- 		and "[a]" instead of "appended" for ':w >> file' command
-- 	  x	use "[dos]" instead of "[dos format]", "[unix]" instead of
-- 		"[unix format]" and "[mac]" instead of "[mac format]".
-- 	  a	all of the above abbreviations
vim.o.shortmess = "ltToOCF"
-- number	(default 0)
-- 			global or local to window |global-local|
-- 	Minimal number of screen lines to keep above and below the cursor.
-- 	This will make some context visible around where you are working.  If
-- 	you set it to a very large value (999) the cursor line will always be
-- 	in the middle of the window (except at the start or end of the file or
-- 	when long lines wrap).
-- 	After using the local value, go back the global value with one of
-- 	these two: >
-- 		setlocal scrolloff<
-- 		setlocal scrolloff=-1
-- <	For scrolling horizontally see 'sidescrolloff'.
vim.o.scrolloff = "0"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	If on and using a tags file in another directory, file names in that
-- 	tags file are relative to the directory where the tags file is.
vim.o.tagrelative = "true"
-- string	(default empty)
-- 			global
-- 	When nonempty, this option determines the content of the tab pages
-- 	line at the top of the Vim window.  When empty Vim will use a default
-- 	tab pages line.  See |setting-tabline| for more info.
vim.o.tabline = ""
-- string	(default "./tags;,tags")
-- 			global or local to buffer |global-local|
-- 	Filenames for the tag command, separated by spaces or commas.  To
-- 	include a space or comma in a file name, precede it with a backslash
-- 	(see |option-backslash| about including spaces and backslashes).
-- 	When a file name starts with "./", the '.' is replaced with the path
-- 	of the current file.  But only when the 'd' flag is not included in
-- 	'cpoptions'.  Environment variables are expanded |:set_env|.  Also see
-- 	|tags-option|.
-- 	"*", "**" and other wildcards can be used to search for tags files in
-- 	a directory tree.  See |file-searching|.  E.g., "/lib/**/tags" will
-- 	find all files named "tags" below "/lib".  The filename itself cannot
-- 	contain wildcards, it is used as-is.  E.g., "/lib/**/tags?" will find
-- 	files called "tags?".
-- 	The |tagfiles()| function can be used to get a list of the file names
-- 	actually used.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	file names from the list.  This avoids problems when a future version
-- 	uses another default.
vim.o.tags = "./tags;,tags"
-- string	(default " ^I!@*-+;:,./?")
-- 			global
-- 	This option lets you choose which characters might cause a line
-- 	break if 'linebreak' is on.  Only works for ASCII characters.
vim.o.breakat = " \9!@*-+;:,./?"
-- string	(default "")
-- 			global
-- 	These values can be used:
-- 	msg	Error messages that would otherwise be omitted will be given
-- 		anyway.
-- 	throw	Error messages that would otherwise be omitted will be given
-- 		anyway and also throw an exception and set |v:errmsg|.
-- 	beep	A message will be given when otherwise only a beep would be
-- 		produced.
-- 	The values can be combined, separated by a comma.
-- 	"msg" and "throw" are useful for debugging 'foldexpr', 'formatexpr' or
-- 	'indentexpr'.
vim.o.debug = ""
-- string	(default '')
-- 			global
-- 	Flags to change the way redrawing works, for debugging purposes.
-- 	Most useful with 'writedelay' set to some reasonable value.
-- 	Supports the following flags:
-- 	    compositor	Indicate what redraws come from the compositor
-- 			by briefly flashing the redrawn regions in colors
-- 			indicating the redraw type. These are the highlight
-- 			groups used (and their default colors):
-- 		RedrawDebugNormal   gui=reverse   normal redraw passed through
-- 		RedrawDebugClear    guibg=Yellow  clear event passed through
-- 		RedrawDebugComposed guibg=Green   redraw event modified by the
-- 						  compositor (due to
-- 						  overlapping grids, etc)
-- 		RedrawDebugRecompose guibg=Red    redraw generated by the
-- 						  compositor itself, due to a
-- 						  grid being moved or deleted.
-- 	    nothrottle	Turn off throttling of the message grid. This is an
-- 			optimization that joins many small scrolls to one
-- 			larger scroll when drawing the message area (with
-- 			'display' msgsep flag active).
-- 	    invalid	Enable stricter checking (abort) of inconsistencies
-- 			of the internal screen state. This is mostly
-- 			useful when running nvim inside a debugger (and
-- 			the test suite).
-- 	    nodelta	Send all internally redrawn cells to the UI, even if
-- 	                they are unchanged from the already displayed state.
vim.o.redrawdebug = ""
-- boolean (default off)
-- 			global
-- 	Enables 24-bit RGB color in the |TUI|.  Uses "gui" |:highlight|
-- 	attributes instead of "cterm" attributes. |highlight-guifg|
-- 	Requires an ISO-8613-3 compatible terminal.
vim.o.termguicolors = "false"
-- boolean	(default off)
-- 			global
-- 	When set: Add 's' flag to 'shortmess' option (this makes the message
-- 	for a search that hits the start or end of the file not being
-- 	displayed).  When reset: Remove 's' flag from 'shortmess' option.
vim.o.terse = "false"
-- boolean (default off)
-- 			global
-- 	The terminal is in charge of Bi-directionality of text (as specified
-- 	by Unicode).  The terminal is also expected to do the required shaping
-- 	that some languages (such as Arabic) require.
-- 	Setting this option implies that 'rightleft' will not be set when
-- 	'arabic' is set and the value of 'arabicshape' will be ignored.
-- 	Note that setting 'termbidi' has the immediate effect that
-- 	'arabicshape' is ignored, but 'rightleft' isn't changed automatically.
-- 	For further details see |arabic.txt|.
vim.o.termbidi = "false"
-- string	(default "")
-- 			global
-- 	Language to use for menu translation.  Tells which file is loaded
-- 	from the "lang" directory in 'runtimepath': >
-- 		"lang/menu_" . &langmenu . ".vim"
-- <	(without the spaces).  For example, to always use the Dutch menus, no
-- 	matter what $LANG is set to: >
-- 		:set langmenu=nl_NL.ISO_8859-1
-- <	When 'langmenu' is empty, |v:lang| is used.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
-- 	If your $LANG is set to a non-English language but you do want to use
-- 	the English menus: >
-- 		:set langmenu=none
-- <	This option must be set before loading menus, switching on filetype
-- 	detection or syntax highlighting.  Once the menus are defined setting
-- 	this option has no effect.  But you could do this: >
-- 		:source $VIMRUNTIME/delmenu.vim
-- 		:set langmenu=de_DE.ISO_8859-1
-- 		:source $VIMRUNTIME/menu.vim
-- <	Warning: This deletes all menus that you defined yourself!
vim.o.langmenu = ""
-- string (default: "latin1" or value from $LANG)
-- 			global
-- 	Sets the character encoding used inside Vim.  It applies to text in
-- 	the buffers, registers, Strings in expressions, text stored in the
-- 	viminfo file, etc.  It sets the kind of characters which Vim can work
-- 	with.  See |encoding-names| for the possible values.
vim.o.encoding = "utf-8"
vim.o.cdhome = "false"
vim.o.thesaurusfunc = ""
-- boolean (default on)
-- 			global
-- 	This option and 'timeoutlen' determine the behavior when part of a
-- 	mapped key sequence has been received. For example, if <c-f> is
-- 	pressed and 'timeout' is set, Nvim will wait 'timeoutlen' milliseconds
-- 	for any key that can follow <c-f> in a mapping.
vim.o.timeout = "true"
-- number	(default 4000)
-- 			global
-- 	If this many milliseconds nothing is typed the swap file will be
-- 	written to disk (see |crash-recovery|).  Also used for the
-- 	|CursorHold| autocommand event.
vim.o.updatetime = "4000"
-- boolean	(default on, off when a |vimrc| or |gvimrc|
-- 					file is found, reset in |defaults.vim|)
-- 			global
-- 	This option has the effect of making Vim either more Vi-compatible, or
-- 	make Vim behave in a more useful way.
vim.o.compatible = "false"
-- boolean (default off)
-- 			global
-- 	When on, Vim will change the current working directory whenever you
-- 	open a file, switch buffers, delete a buffer or open/close a window.
-- 	It will change to the directory containing the file which was opened
-- 	or selected.
-- 	Note: When this option is on some plugins may not work.
vim.o.autochdir = "false"
-- number	(default 0)
-- 			global
-- 	When bigger than zero, Vim will give messages about what it is doing.
-- 	Currently, these messages are given:
-- 	>= 1	When the shada file is read or written.
-- 	>= 2	When a file is ":source"'ed.
-- 	>= 3	UI info, terminal capabilities
-- 	>= 5	Every searched tags file and include file.
-- 	>= 8	Files for which a group of autocommands is executed.
-- 	>= 9	Every executed autocommand.
-- 	>= 12	Every executed function.
-- 	>= 13	When an exception is thrown, caught, finished, or discarded.
-- 	>= 14	Anything pending in a ":finally" clause.
-- 	>= 15	Every executed Ex command (truncated at 200 characters).
vim.o.verbose = "0"
vim.o.termpastefilter = "BS,HT,ESC,DEL"
-- Removed. |vim-differences|
vim.o.ttyfast = "true"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	When on, listings pause when the whole screen is filled.  You will get
-- 	the |more-prompt|.  When this option is off there are no pauses, the
-- 	listing continues until finished.
vim.o.more = "true"
-- string	(default "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20")
-- 			global
-- 	Configures the cursor style for each mode. Works in the GUI and many
-- 	terminals.  See |tui-cursor-shape|.
vim.o.guicursor = "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20"
-- boolean (default on)
-- 			global
-- 	This option and 'ttimeoutlen' determine the behavior when part of a
-- 	key code sequence has been received by the |TUI|.
vim.o.ttimeout = "true"
-- string	(default "i:beam,r:beam,s:updown,sd:cross,
-- 					m:no,ml:up-arrow,v:rightup-arrow")
-- 			global
-- 	This option tells Vim what the mouse pointer should look like in
-- 	different modes.  The option is a comma separated list of parts, much
-- 	like used for 'guicursor'.  Each part consist of a mode/location-list
-- 	and an argument-list:
-- 		mode-list:shape,mode-list:shape,..
-- 	The mode-list is a dash separated list of these modes/locations:
-- 			In a normal window: ~
-- 		n	Normal mode
-- 		v	Visual mode
-- 		ve	Visual mode with 'selection' "exclusive" (same as 'v',
-- 			if not specified)
-- 		o	Operator-pending mode
-- 		i	Insert mode
-- 		r	Replace mode
vim.o.mouseshape = ""
-- number	(default 0)
-- 			global
-- 	The number of milliseconds to wait for each character sent to the
-- 	screen.  When positive, characters are sent to the UI one by one.
-- 	See 'redrawdebug' for more options.  For debugging purposes.
vim.o.writedelay = "0"
-- string	(default "IPLPPPQPP TPHPLIPpLpItpplpipbp")
-- 			global
-- 	Specifies the nroff macros that separate paragraphs.  These are pairs
-- 	of two letters (see |object-motions|).
vim.o.paragraphs = "IPLPPPQPP TPHPLIPpLpItpplpipbp"
-- string	(default "")
-- 			global
-- 	When this option is not empty, it will be used for the title of the
-- 	window.  This happens only when the 'title' option is on.
vim.o.titlestring = ""
-- boolean	(default off)
-- 			global
-- 	Like 'autowrite', but also used for commands ":edit", ":enew", ":quit",
-- 	":qall", ":exit", ":xit", ":recover" and closing the Vim window.
-- 	Setting this option also implies that Vim behaves like 'autowrite' has
-- 	been set.
vim.o.autowriteall = "false"
-- string	(default empty)
-- 			global
-- 	When not empty all messages are written in a file with this name.
-- 	When the file exists messages are appended.
-- 	Writing to the file ends when Vim exits or when 'verbosefile' is made
-- 	empty.  Writes are buffered, thus may not show up for some time.
-- 	Setting 'verbosefile' to a new value is like making it empty first.
-- 	The difference with |:redir| is that verbose messages are not
-- 	displayed when 'verbosefile' is set.
vim.o.verbosefile = ""
-- string	(default: "$XDG_DATA_HOME/nvim/view")
-- 			global
-- 	Name of the directory where to store files for |:mkview|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.viewdir = "/home/runner/.local/state/nvim/view//"
-- boolean	(default off)
-- 			global
-- 			{only for Windows}
-- 	Enable reading and writing from devices.  This may get Vim stuck on a
-- 	device that can be opened but doesn't actually do the I/O.  Therefore
-- 	it is off by default.
-- 	Note that on Windows editing "aux.h", "lpt1.txt" and the like also
-- 	result in editing a device.
vim.o.opendevice = "false"
-- string	(default "pum,tagfile")
-- 			global
-- 	List of words that change how |cmdline-completion| is done.
-- 	  pum		Display the completion matches using the popupmenu
-- 			in the same style as the |ins-completion-menu|.
-- 	  tagfile	When using CTRL-D to list matching tags, the kind of
-- 			tag and the file of the tag is listed.	Only one match
-- 			is displayed per line.  Often used tag kinds are:
-- 				d	#define
-- 				f	function
vim.o.wildoptions = "pum,tagfile"
-- string	(default: "$TMPDIR/*,$TMP/*,$TEMP/*"
-- 				 Unix: "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*"
-- 				 Mac: "/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
-- 			global
-- 	A list of file patterns.  When one of the patterns matches with the
-- 	name of the file which is written, no backup file is created.  Both
-- 	the specified file name and the full path name of the file are used.
-- 	The pattern is used like with |:autocmd|, see |autocmd-pattern|.
-- 	Watch out for special characters, see |option-backslash|.
-- 	When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the
-- 	default value.  "/tmp/*" is only used for Unix.
vim.o.backupskip = "/tmp/*"
-- string	(default "extend")
-- 			global
-- 	Sets the model to use for the mouse.  The name mostly specifies what
-- 	the right mouse button is used for:
-- 	   extend	Right mouse button extends a selection.  This works
-- 			like in an xterm.
-- 	   popup	Right mouse button pops up a menu.  The shifted left
-- 			mouse button extends a selection.  This works like
-- 			with Microsoft Windows.
-- 	   popup_setpos Like "popup", but the cursor will be moved to the
-- 			position where the mouse was clicked, and thus the
-- 			selected operation will act upon the clicked object.
-- 			If clicking inside a selection, that selection will
-- 			be acted upon, i.e. no cursor move.  This implies of
-- 			course, that right clicking outside a selection will
-- 			end Visual mode.
-- 	Overview of what button does what for each model:
-- 	mouse		    extend		popup(_setpos) ~
-- 	left click	    place cursor	place cursor
-- 	left drag	    start selection	start selection
-- 	shift-left	    search word		extend selection
-- 	right click	    extend selection	popup menu (place cursor)
-- 	right drag	    extend selection	-
-- 	middle click	    paste		paste
vim.o.mousemodel = "popup_setpos"
-- string	(default "")
-- 			global
-- 	A comma separated list of these words:
-- 	    block	Allow virtual editing in Visual block mode.
-- 	    insert	Allow virtual editing in Insert mode.
-- 	    all		Allow virtual editing in all modes.
-- 	    onemore	Allow the cursor to move just past the end of the line
vim.o.virtualedit = ""
-- string	(default "")
-- 			global
-- 	When non-empty, specifies the key sequence that toggles the 'paste'
-- 	option.  This is like specifying a mapping: >
-- 	    :map {keys} :set invpaste<CR>
-- <	Where {keys} is the value of 'pastetoggle'.
-- 	The difference is that it will work even when 'paste' is set.
-- 	'pastetoggle' works in Insert mode and Normal mode, but not in
-- 	Command-line mode.
-- 	Mappings are checked first, thus overrule 'pastetoggle'.  However,
-- 	when 'paste' is on mappings are ignored in Insert mode, thus you can do
-- 	this: >
-- 	    :map <F10> :set paste<CR>
-- 	    :map <F11> :set nopaste<CR>
-- 	    :imap <F10> <C-O>:set paste<CR>
-- 	    :imap <F11> <nop>
-- 	    :set pastetoggle=<F11>
-- <	This will make <F10> start paste mode and <F11> stop paste mode.
-- 	Note that typing <F10> in paste mode inserts "<F10>", since in paste
-- 	mode everything is inserted literally, except the 'pastetoggle' key
-- 	sequence.
-- 	No timeout is used, this means that a multi-key 'pastetoggle' can not
-- 	be triggered manually.
vim.o.pastetoggle = ""
-- string	(default ""; with GTK+ GUI: "utf-8"; with
-- 						    Macintosh GUI: "macroman")
-- 			global
-- 	Encoding used for the terminal.  This specifies what character
-- 	encoding the keyboard produces and the display will understand.  For
-- 	the GUI it only applies to the keyboard ('encoding' is used for the
-- 	display).  Except for the Mac when 'macatsui' is off, then
-- 	'termencoding' should be "macroman".
-- 								*E617*
-- 	Note: This does not apply to the GTK+ GUI.  After the GUI has been
-- 	successfully initialized, 'termencoding' is forcibly set to "utf-8".
-- 	Any attempts to set a different value will be rejected, and an error
-- 	message is shown.
-- 	For the Win32 GUI and console versions 'termencoding' is not used,
-- 	because the Win32 system always passes Unicode characters.
-- 	When empty, the same encoding is used as for the 'encoding' option.
-- 	This is the normal value.
-- 	Not all combinations for 'termencoding' and 'encoding' are valid.  See
-- 	|encoding-table|.
-- 	The value for this option must be supported by internal conversions or
-- 	iconv().  When this is not possible no conversion will be done and you
-- 	will probably experience problems with non-ASCII characters.
-- 	Example: You are working with the locale set to euc-jp (Japanese) and
-- 	want to edit a UTF-8 file: >
-- 		:let &termencoding = &encoding
-- 		:set encoding=utf-8
-- <	You need to do this when your system has no locale support for UTF-8.
vim.o.termencoding = ""
-- boolean (default off)
-- 			global
-- 	When off, setting 'langmap' does not apply to characters resulting from
-- 	a mapping.  If setting 'langmap' disables some of your mappings, make
-- 	sure this option is off.
vim.o.langremap = "false"
-- string	(default $SHELL or "sh",
-- 					Windows: "cmd.exe")
-- 			global
-- 	Name of the shell to use for ! and :! commands.  When changing the
-- 	value also check these options: 'shellpipe', 'shellslash'
-- 	'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
-- 	It is allowed to give an argument to the command, e.g.  "csh -f".
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Environment variables are expanded |:set_env|.
-- 	If the name of the shell contains a space, you might need to enclose
-- 	it in quotes.  Example: >
-- 		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
-- <	Note the backslash before each quote (to avoid starting a comment) and
-- 	each space (to avoid ending the option value), so better use |:let-&|
-- 	like this: >
-- 		:let &shell='"C:\Program Files\unix\sh.exe" -f'
-- <	Also note that the "-f" is not inside the quotes, because it is not
-- 	part of the command name.
-- 							*shell-unquoting*
-- 	Rules regarding quotes:
-- 	1. Option is split on space and tab characters that are not inside
-- 	   quotes: "abc def" runs shell named "abc" with additional argument
-- 	   "def", '"abc def"' runs shell named "abc def" with no additional
-- 	   arguments (here and below: additional means “additional to
-- 	   'shellcmdflag'”).
-- 	2. Quotes in option may be present in any position and any number:
-- 	   '"abc"', '"a"bc', 'a"b"c', 'ab"c"' and '"a"b"c"' are all equivalent
-- 	   to just "abc".
-- 	3. Inside quotes backslash preceding backslash means one backslash.
-- 	   Backslash preceding quote means one quote. Backslash preceding
-- 	   anything else means backslash and next character literally:
-- 	   '"a\\b"' is the same as "a\b", '"a\\"b"' runs shell named literally
-- 	   'a"b', '"a\b"' is the same as "a\b" again.
-- 	4. Outside of quotes backslash always means itself, it cannot be used
-- 	   to escape quote: 'a\"b"' is the same as "a\b".
-- 	Note that such processing is done after |:set| did its own round of
-- 	unescaping, so to keep yourself sane use |:let-&| like shown above.
-- 							*shell-powershell*
-- 	To use powershell: >
-- 		let &shell = has('win32') ? 'powershell' : 'pwsh'
-- 		set shellquote= shellpipe=\| shellxquote=
-- 		set shellcmdflag=-NoLogo\ -NoProfile\ -ExecutionPolicy\ RemoteSigned\ -Command
-- 		set shellredir=\|\ Out-File\ -Encoding\ UTF8
vim.o.shell = "sh"
-- boolean	(default off)
-- 			global
-- 	Enable the entering of digraphs in Insert mode with {char1} <BS>
-- 	{char2}.  See |digraphs|.
vim.o.digraph = "false"
-- string	(default "")
-- 			global
-- 	This option controls the behavior when switching between buffers.
-- 	Possible values (comma separated list):
-- 	   useopen	If included, jump to the first open window that
-- 			contains the specified buffer (if there is one).
-- 			Otherwise: Do not examine other windows.
-- 			This setting is checked with |quickfix| commands, when
-- 			jumping to errors (":cc", ":cn", "cp", etc.).  It is
-- 			also used in all buffer related split commands, for
-- 			example ":sbuffer", ":sbnext", or ":sbrewind".
-- 	   usetab	Like "useopen", but also consider windows in other tab
-- 			pages.
-- 	   split	If included, split the current window before loading
-- 			a buffer for a |quickfix| command that display errors.
-- 			Otherwise: do not split, use current window (when used
-- 			in the quickfix window: the previously used window or
-- 			split if there is no other window).
-- 	   vsplit	Just like "split" but split vertically.
-- 	   newtab	Like "split", but open a new tab page.  Overrules
-- 			"split" when both are present.
-- 	   uselast	If included, jump to the previously used window when
-- 			jumping to errors with |quickfix| commands.
vim.o.switchbuf = "uselast"
-- boolean	(default off)
-- 			global
-- 	When set case is ignored when completing file names and directories.
-- 	Has no effect when 'fileignorecase' is set.
-- 	Does not apply when the shell is used to expand wildcards, which
-- 	happens when there are special characters.
vim.o.wildignorecase = "false"
-- boolean	(default off)
-- 			global
-- 	Inserting characters in Insert mode will work backwards.  See "typing
-- 	backwards" |ins-reverse|.  This option can be toggled with the CTRL-_
-- 	command in Insert mode, when 'allowrevins' is set.
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
vim.o.revins = "false"
-- string	(default: "")
-- 			global
-- 	When non-empty, overrides the file name used for |shada| (viminfo).
-- 	When equal to "NONE" no shada file will be read or written.
-- 	This option can be set with the |-i| command line flag.  The |--clean|
-- 	command line flag sets it to "NONE".
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shadafile = ""
-- string	(default: equivalent to $CDPATH or ",,")
-- 			global
-- 	This is a list of directories which will be searched when using the
-- 	|:cd| and |:lcd| commands, provided that the directory being searched
-- 	for has a relative path, not an absolute part starting with "/", "./"
-- 	or "../", the 'cdpath' option is not used then.
-- 	The 'cdpath' option's value has the same form and semantics as
-- 	|'path'|.  Also see |file-searching|.
-- 	The default value is taken from $CDPATH, with a "," prepended to look
-- 	in the current directory first.
-- 	If the default value taken from $CDPATH is not what you want, include
-- 	a modified version of the following command in your vimrc file to
-- 	override it: >
-- 	  :let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
-- 	(parts of 'cdpath' can be passed to the shell to expand file names).
vim.o.cdpath = ",,"
-- number	(default 224)
-- 			global
-- 	The ASCII code for the first letter of the Hebrew alphabet.  The
-- 	routine that maps the keyboard in Hebrew mode, both in Insert mode
-- 	(when hkmap is set) and on the command-line (when hitting CTRL-_)
-- 	outputs the Hebrew characters in the range [aleph..aleph+26].
-- 	aleph=128 applies to PC code, and aleph=224 applies to ISO 8859-8.
-- 	See |rileft.txt|.
vim.o.aleph = "224"
-- boolean	(default off)
-- 			global
-- 	When on, the OS function fsync() will be called after saving a file
-- 	(|:write|, |writefile()|, …), |swap-file| and |shada-file|. This
-- 	flushes the file to disk, ensuring that it is safely written.
-- 	Slow on some systems: writing buffers, quitting Nvim, and other
-- 	operations may sometimes take a few seconds.
vim.o.fsync = "true"
-- string	(default "$XDG_DATA_HOME/nvim/swap//")
-- 			global
-- 	List of directory names for the swap file, separated with commas.
-- 	- The swap file will be created in the first directory where this is
-- 	  possible.  If it is not possible in any directory, but last
-- 	  directory listed in the option does not exist, it is created.
-- 	- Empty means that no swap file will be used (recovery is
-- 	  impossible!) and no |E303| error will be given.
-- 	- A directory "." means to put the swap file in the same directory as
-- 	  the edited file.  On Unix, a dot is prepended to the file name, so
-- 	  it doesn't show in a directory listing.  On MS-Windows the "hidden"
-- 	  attribute is set and a dot prepended if possible.
-- 	- A directory starting with "./" (or ".\" for Windows) means to
-- 	  put the swap file relative to where the edited file is.  The leading
-- 	  "." is replaced with the path name of the edited file.
-- 	- For Unix and Win32, if a directory ends in two path separators "//",
-- 	  the swap file name will be built from the complete path to the file
-- 	  with all path separators substituted to percent '%' signs. This will
-- 	  ensure file name uniqueness in the preserve directory.
-- 	  On Win32, it is also possible to end with "\\".  However, When a
-- 	  separating comma is following, you must use "//", since "\\" will
-- 	  include the comma in the file name. Therefore it is recommended to
-- 	  use '//', instead of '\\'.
-- 	- Spaces after the comma are ignored, other spaces are considered part
-- 	  of the directory name.  To have a space at the start of a directory
-- 	  name, precede it with a backslash.
-- 	- To include a comma in a directory name precede it with a backslash.
-- 	- A directory name may end in an ':' or '/'.
-- 	- Environment variables are expanded |:set_env|.
-- 	- Careful with '\' characters, type one before a space, type two to
-- 	  get one in the option (see |option-backslash|), for example: >
-- 	    :set dir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
-- <	- For backwards compatibility with Vim version 3.0 a '>' at the start
-- 	  of the option is removed.
-- 	Using "." first in the list is recommended.  This means that editing
-- 	the same file twice will result in a warning.  Using "/tmp" on Unix is
-- 	discouraged: When the system crashes you lose the swap file.
-- 	"/var/tmp" is often not cleared when rebooting, thus is a better
-- 	choice than "/tmp".  But it can contain a lot of files, your swap
-- 	files get lost in the crowd.  That is why a "tmp" directory in your
-- 	home directory is tried first.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	directories from the list.  This avoids problems when a future version
-- 	uses another default.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.directory = "/home/runner/.local/state/nvim/swap//"
-- boolean	(default off)
-- 			global
-- 			{only for Windows}
-- 	When set, a forward slash is used when expanding file names.  This is
-- 	useful when a Unix-like shell is used instead of command.com or
-- 	cmd.exe.  Backward slashes can still be typed, but they are changed to
-- 	forward slashes by Vim.
-- 	Note that setting or resetting this option has no effect for some
-- 	existing file names, thus this option needs to be set before opening
-- 	any file for best results.  This might change in the future.
-- 	'shellslash' only works when a backslash can be used as a path
-- 	separator.  To test if this is so use: >
-- 		if exists('+shellslash')
-- <
-- 			*'shelltemp'* *'stmp'* *'noshelltemp'* *'nostmp'*
vim.o.shellslash = "false"
-- string	(default "")
-- 			global
vim.o.mouse = "nvi"
-- string	(default "")
-- 			global
-- 	This is a list of fonts which will be used for the GUI version of Vim.
-- 	In its simplest form the value is just one font name.  When
-- 	the font cannot be found you will get an error message.  To try other
-- 	font names a list can be specified, font names separated with commas.
-- 	The first valid font is used.
vim.o.guifont = ""
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
-- 	contain a list of words.  This can be one word per line, or several
-- 	words per line, separated by non-keyword characters (white space is
-- 	preferred).  Maximum line length is 510 bytes.
vim.o.dictionary = ""
-- boolean	(default on)
-- 			global
-- 	Show the line and column number of the cursor position, separated by a
-- 	comma.  When there is room, the relative position of the displayed
-- 	text in the file is shown on the far right:
-- 		Top	first line is visible
-- 		Bot	last line is visible
-- 		All	first and last line are visible
-- 		45%	relative position in the file
-- 	If 'rulerformat' is set, it will determine the contents of the ruler.
-- 	Each window has its own ruler.  If a window has a status line, the
-- 	ruler is shown there.  Otherwise it is shown in the last line of the
-- 	screen.  If the statusline is given by 'statusline' (i.e. not empty),
-- 	this option takes precedence over 'ruler' and 'rulerformat'
-- 	If the number of characters displayed is different from the number of
-- 	bytes in the text (e.g., for a TAB or a multi-byte character), both
-- 	the text column (byte number) and the screen column are shown,
-- 	separated with a dash.
-- 	For an empty line "0-1" is shown.
-- 	For an empty buffer the line number will also be zero: "0,0-1".
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
-- 	If you don't want to see the ruler all the time but want to know where
-- 	you are, use "g CTRL-G" |g_CTRL-G|.
vim.o.ruler = "true"
-- boolean	(default off)
-- 			global
-- 	When a bracket is inserted, briefly jump to the matching one.  The
-- 	jump is only done if the match can be seen on the screen.  The time to
-- 	show the match can be set with 'matchtime'.
-- 	A Beep is given if there is no match (no matter if the match can be
-- 	seen or not).
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
-- 	When the 'm' flag is not included in 'cpoptions', typing a character
-- 	will immediately move the cursor back to where it belongs.
-- 	See the "sm" field in 'guicursor' for setting the cursor shape and
-- 	blinking when showing the match.
-- 	The 'matchpairs' option can be used to specify the characters to show
-- 	matches for.  'rightleft' and 'revins' are used to look for opposite
-- 	matches.
-- 	Also see the matchparen plugin for highlighting the match when moving
-- 	around |pi_paren.txt|.
-- 	Note: Use of the short form is rated PG.
vim.o.showmatch = "false"
-- string	(default (MSDOS)  "$VIMRUNTIME\doc\help.txt"
-- 					 (others) "$VIMRUNTIME/doc/help.txt")
-- 			global
-- 	Name of the main help file.  All distributed help files should be
-- 	placed together in one directory.  Additionally, all "doc" directories
-- 	in 'runtimepath' will be used.
-- 	Environment variables are expanded |:set_env|.  For example:
-- 	"$VIMRUNTIME/doc/help.txt".  If $VIMRUNTIME is not set, $VIM is also
-- 	tried.  Also see |$VIMRUNTIME| and |option-backslash| about including
-- 	spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.helpfile = "/usr/share/nvim/runtime/doc/help.txt"
-- string	(default "ver,jump")
-- 			global
-- 	This is a comma-separated list of words that specifies how
-- 	'scrollbind' windows should behave.  'sbo' stands for ScrollBind
-- 	Options.
-- 	The following words are available:
-- 	    ver		Bind vertical scrolling for 'scrollbind' windows
-- 	    hor		Bind horizontal scrolling for 'scrollbind' windows
-- 	    jump	Applies to the offset between two windows for vertical
-- 			scrolling.  This offset is the difference in the first
-- 			displayed line of the bound windows.  When moving
-- 			around in a window, another 'scrollbind' window may
-- 			reach a position before the start or after the end of
-- 			the buffer.  The offset is not changed though, when
-- 			moving back the 'scrollbind' window will try to scroll
-- 			to the desired position when possible.
-- 			When now making that window the current one, two
-- 			things can be done with the relative offset:
-- 			1. When "jump" is not included, the relative offset is
-- 			   adjusted for the scroll position in the new current
-- 			   window.  When going back to the other window, the
-- 			   new relative offset will be used.
-- 			2. When "jump" is included, the other windows are
-- 			   scrolled to keep the same relative offset.  When
-- 			   going back to the other window, it still uses the
-- 			   same relative offset.
-- 	Also see |scroll-binding|.
-- 	When 'diff' mode is active there always is vertical scroll binding,
-- 	even when "ver" isn't there.
vim.o.scrollopt = "ver,jump"
-- boolean	(default on)
-- 			global
-- 	Insert two spaces after a '.', '?' and '!' with a join command.
-- 	Otherwise only one space is inserted.
vim.o.joinspaces = "false"
-- string	(default: "blank,buffers,curdir,folds,
-- 					       help,tabpages,winsize"
-- 				 Vi default: "blank,buffers,curdir,folds,
-- 					       help,options,tabpages,winsize")
-- 			global
-- 	Changes the effect of the |:mksession| command.  It is a comma
-- 	separated list of words.  Each word enables saving and restoring
-- 	something:
-- 	   word		save and restore ~
-- 	   blank	empty windows
-- 	   buffers	hidden and unloaded buffers, not just those in windows
-- 	   curdir	the current directory
-- 	   folds	manually created folds, opened/closed folds and local
-- 			fold options
-- 	   globals	global variables that start with an uppercase letter
-- 			and contain at least one lowercase letter.  Only
-- 			String and Number types are stored.
-- 	   help		the help window
-- 	   localoptions	options and mappings local to a window or buffer (not
-- 			global values for local options)
-- 	   options	all options and mappings (also global values for local
-- 			options)
-- 	   resize	size of the Vim window: 'lines' and 'columns'
-- 	   sesdir	the directory in which the session file is located
-- 			will become the current directory (useful with
-- 			projects accessed over a network from different
-- 			systems)
-- 	   slash	backslashes in file names replaced with forward
-- 			slashes
-- 	   tabpages	all tab pages; without this only the current tab page
-- 			is restored, so that you can make a session for each
-- 			tab page separately
-- 	   terminal	include terminal windows where the command can be
-- 			restored
-- 	   unix		with Unix end-of-line format (single <NL>), even when
-- 			on Windows or DOS
-- 	   winpos	position of the whole Vim window
-- 	   winsize	window sizes
vim.o.sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize,terminal"
vim.o.winbar = ""
-- boolean	(default off)
-- 			global
-- 			{only works in the GUI}
-- 	The window that the mouse pointer is on is automatically activated.
-- 	When changing the window layout or window focus in another way, the
-- 	mouse pointer is moved to the window with keyboard focus.  Off is the
-- 	default because it makes using the pull down menus a little goofy, as
-- 	a pointer transit may activate a window unintentionally.
vim.o.mousefocus = "false"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	Show (partial) command in the last line of the screen.  Set this
-- 	option off if your terminal is slow.
-- 	In Visual mode the size of the selected area is shown:
-- 	- When selecting characters within a line, the number of characters.
-- 	  If the number of bytes is different it is also displayed: "2-6"
-- 	  means two characters and six bytes.
-- 	- When selecting more than one line, the number of lines.
-- 	- When selecting a block, the size in screen characters:
-- 	  {lines}x{columns}.
vim.o.showcmd = "true"
-- number	(default 1)
-- 			global
-- 	The value of this option specifies when the line with tab page labels
-- 	will be displayed:
-- 		0: never
-- 		1: only if there are at least two tab pages
-- 		2: always
-- 	This is both for the GUI and non-GUI implementation of the tab pages
-- 	line.
-- 	See |tab-page| for more information about tab pages.
vim.o.showtabline = "1"
-- boolean (default off)
-- 			global
-- 	When on, phonetic keyboard mapping is used.  'hkmap' must also be on.
-- 	This is useful if you have a non-Hebrew keyboard.
-- 	See |rileft.txt|.
vim.o.hkmapp = "false"
-- number	(default 1000)
-- 			global
-- 	Maximum number of times a mapping is done without resulting in a
-- 	character to be used.  This normally catches endless mappings, like
-- 	":map x y" with ":map y x".  It still does not catch ":map g wg",
-- 	because the 'w' is used before the next mapping is done.  See also
-- 	|key-mapping|.
vim.o.maxmapdepth = "1000"
-- number	(default 500)
-- 			global
-- 	Defines the maximum time in msec between two mouse clicks for the
-- 	second click to be recognized as a multi click.
vim.o.mousetime = "500"
-- string	(default: "")
-- 			global
-- 	Name of the errorfile for the |:make| command (see |:make_makeprg|)
-- 	and the |:grep| command.
-- 	When it is empty, an internally generated temp file will be used.
-- 	When "##" is included, it is replaced by a number to make the name
-- 	unique.  This makes sure that the ":make" command doesn't overwrite an
-- 	existing file.
-- 	NOT used for the ":cf" command.  See 'errorfile' for that.
-- 	Environment variables are expanded |:set_env|.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.makeef = ""
-- string	(default: empty)
-- 			global
-- 	This option specifies a function to be called by the |g@| operator.
-- 	See |:map-operator| for more info and an example.
vim.o.operatorfunc = ""
-- string	(default: "-c"; Windows: "/s /c")
-- 			global
-- 	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
-- 	`bash.exe -c ls` or `cmd.exe /s /c "dir"`.  For Windows
-- 	systems, the default is set according to the value of 'shell', to
-- 	reduce the need to set this option by the user.
-- 	On Unix it can have more than one flag.  Each white space separated
-- 	part is passed as an argument to the shell command.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	See |shell-unquoting| which talks about separating this option into
-- 	multiple arguments.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellcmdflag = "-c"
-- string	(default: "")
-- 			local to buffer
-- 			{only for MS-Windows}
-- 	When this option is set it overrules 'shellslash' for completion:
-- 	- When this option is set to "slash", a forward slash is used for path
-- 	  completion in insert mode. This is useful when editing HTML tag, or
-- 	  Makefile with 'noshellslash' on Windows.
-- 	- When this option is set to "backslash", backslash is used. This is
-- 	  useful when editing a batch file with 'shellslash' set on Windows.
-- 	- When this option is empty, same character is used as for
-- 	  'shellslash'.
-- 	For Insert mode completion the buffer-local value is used.  For
-- 	command line completion the global value is used.
vim.o.completeslash = ""
vim.o.showcmdloc = "last"
-- boolean	(default on)
-- 			global
-- 	Allows for mappings to work recursively.  If you do not want this for
-- 	a single entry, use the :noremap[!] command.
-- 	NOTE: To avoid portability problems with Vim scripts, always keep
-- 	this option at the default "on".  Only switch it off when working with
-- 	old Vi scripts.
vim.o.remap = "true"
-- boolean (default off, on for some systems (SGI))
-- 			global
-- 	When set the Input Method is never used.  This is useful to disable
-- 	the IM when it doesn't work properly.
-- 	Currently this option is on by default for SGI/IRIX machines.  This
-- 	may change in later releases.
vim.o.imdisable = "false"
-- boolean	(default off)
-- 			local to window
-- 	Join the current window in the group of windows that shows differences
-- 	between files.  See |diff-mode|.
vim.wo.diff = "false"
-- string	(default empty)
-- 			global or local to window |global-local|
-- 	When nonempty, this option determines the content of the status line.
-- 	Also see |status-line|.
vim.wo.statusline = ""
-- boolean	(default off)
-- 			local to window
-- 	Highlight the screen line of the cursor with CursorLine
-- 	|hl-CursorLine|.  Useful to easily spot the cursor.  Will make screen
-- 	redrawing slower.
-- 	When Visual mode is active the highlighting isn't used to make it
-- 	easier to see the selected text.
vim.wo.cursorline = "false"
-- string (default: "{{{,}}}")
-- 			local to window
-- 	The start and end marker used when 'foldmethod' is "marker".  There
-- 	must be one comma, which separates the start and end marker.  The
-- 	marker is a literal string (a regular expression would be too slow).
-- 	See |fold-marker|.
vim.wo.foldmarker = "{{{,}}}"
-- string (default: "0")
-- 			local to window
-- 	The expression used for when 'foldmethod' is "expr".  It is evaluated
-- 	for each line to obtain its fold level.  See |fold-expr|.
vim.wo.foldexpr = "0"
-- string (default empty)
-- 			local to window
-- 	Window-local highlights.  Comma-delimited list of highlight
-- 	|group-name| pairs "{hl-builtin}:{hl},..." where each {hl-builtin} is
-- 	a built-in |highlight-groups| item to be overridden by {hl} group in
-- 	the window.  Only built-in |highlight-groups| are supported, not
-- 	syntax highlighting (use |:ownsyntax| for that).
vim.wo.winhighlight = ""
-- boolean	(default off)
-- 			local to window
-- 	Print the line number in front of each line.  When the 'n' option is
-- 	excluded from 'cpoptions' a wrapped line will not use the column of
-- 	line numbers.
-- 	Use the 'numberwidth' option to adjust the room for the line number.
-- 	When a long, wrapped line doesn't start with the first character, '-'
-- 	characters are put before the number.
-- 	For highlighting see |hl-LineNr|, |hl-CursorLineNr|, and the
-- 	|:sign-define| "numhl" argument.
-- 						*number_relativenumber*
-- 	The 'relativenumber' option changes the displayed number to be
-- 	relative to the cursor.  Together with 'number' there are these
-- 	four combinations (cursor in line 3):
vim.wo.number = "false"
-- boolean	(default off)
-- 			local to window
-- 	Highlight the screen column of the cursor with CursorColumn
-- 	|hl-CursorColumn|.  Useful to align text.  Will make screen redrawing
-- 	slower.
-- 	If you only want the highlighting in the current window you can use
-- 	these autocommands: >
-- 		au WinLeave * set nocursorline nocursorcolumn
-- 		au WinEnter * set cursorline cursorcolumn
-- <
vim.wo.cursorcolumn = "false"
-- number	(Vim default: 4  Vi default: 8)
-- 			local to window
-- 	Minimal number of columns to use for the line number.  Only relevant
-- 	when the 'number' or 'relativenumber' option is set or printing lines
-- 	with a line number. Since one space is always between the number and
-- 	the text, there is one less character for the number itself.
-- 	The value is the minimum width.  A bigger width is used when needed to
-- 	fit the highest line number in the buffer respectively the number of
-- 	rows in the window, depending on whether 'number' or 'relativenumber'
-- 	is set. Thus with the Vim default of 4 there is room for a line number
-- 	up to 999. When the buffer has 1000 lines five columns will be used.
-- 	The minimum value is 1, the maximum value is 20.
vim.wo.numberwidth = "4"
-- boolean (default off)
-- 			local to window
-- 	Every wrapped line will continue visually indented (same amount of
-- 	space as the beginning of that line), thus preserving horizontal blocks
-- 	of text.
vim.wo.breakindent = "false"
-- boolean	(default off)
-- 			local to window
-- 	If on, Vim will wrap long lines at a character in 'breakat' rather
-- 	than at the last character that fits on the screen.  Unlike
-- 	'wrapmargin' and 'textwidth', this does not insert <EOL>s in the file,
-- 	it only affects the way the file is displayed, not its contents.
-- 	If 'breakindent' is set, line is visually indented. Then, the value
-- 	of 'showbreak' is used to put in front of wrapped lines. This option
-- 	is not used when the 'wrap' option is off.
-- 	Note that <Tab> characters after an <EOL> are mostly not displayed
-- 	with the right amount of white space.
vim.wo.linebreak = "false"
-- boolean  (default off)
-- 			local to window
-- 	When this option is set, as the cursor in the current
-- 	window moves other cursorbound windows (windows that also have
-- 	this option set) move their cursors to the corresponding line and
-- 	column.  This option is useful for viewing the
-- 	differences between two versions of a file (see 'diff'); in diff mode,
-- 	inserted and deleted lines (though not characters within a line) are
-- 	taken into account.
vim.wo.cursorbind = "false"
-- string (default: "")
-- 			local to window
-- 	Sets the modes in which text in the cursor line can also be concealed.
-- 	When the current mode is listed then concealing happens just like in
-- 	other lines.
-- 	  n		Normal mode
-- 	  v		Visual mode
-- 	  i		Insert mode
-- 	  c		Command line editing, for 'incsearch'
vim.wo.concealcursor = ""
